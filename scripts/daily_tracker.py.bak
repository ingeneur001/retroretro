#!/usr/bin/env python3
"""
Daily Standup Automation - Standalone Script
SYNTAX-FIXED VERSION - Clean and Working
"""

import json
import argparse
from datetime import datetime, timedelta
from pathlib import Path
import random

class DailyStandup:
    def __init__(self):
        current_dir = Path.cwd()
        
        if current_dir.name == "scripts":
            self.project_root = current_dir.parent
            print(f"📁 Detected: scripts/ - using root: {self.project_root.absolute()}")
        else:
            self.project_root = current_dir
            print(f"📁 Using current directory: {self.project_root.absolute()}")
        
        self.docs_development = self.project_root / "docs" / "development"
        self.progress_json = self.docs_development / "progress.json"
        self.progress_data = self._load_progress_data()
    
    def _load_progress_data(self):
        if not self.progress_json.exists():
            print(f"❌ Progress data not found: {self.progress_json}")
            print("💡 Run 'python progress_tracker.py status' first")
            return {"tags": {}, "current_priorities": [], "daily_logs": []}
        
        try:
            with open(self.progress_json, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"❌ Error loading progress data: {e}")
            return {"tags": {}, "current_priorities": [], "daily_logs": []}
    
    def _save_progress_data(self):
        self.progress_data["last_update"] = datetime.now().isoformat()
        try:
            with open(self.progress_json, 'w', encoding='utf-8') as f:
                json.dump(self.progress_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"❌ Error saving progress data: {e}")
    
    def morning_standup(self):
        now = datetime.now()
        today = now.strftime("%A, %B %d, %Y")
        
        print("\n" + "=" * 65)
        print(f"☀️ GOOD MORNING! Today's Game Plan")
        print(f"📅 {today}")
        print("=" * 65)
        
        # Project overview
        self._show_project_overview()
        
        # Today's focus items
        focus_items = self._get_todays_focus_items()
        total_focus_hours = sum(item['hours'] for item in focus_items)
        
        print(f"\n🔥 TODAY'S FOCUS ITEMS (Est. {total_focus_hours}h):")
        print("-" * 50)
        
        if not focus_items:
            print("   🎉 No active priorities - all caught up!")
            print("   💡 Consider planning next phase or quick wins")
        else:
            for i, item in enumerate(focus_items, 1):
                priority_icon = {"critical": "🔴", "high": "🟠", "medium": "🟡", "low": "🟢"}.get(item["priority"], "⚪")
                task_name = item['task'][:40] + "..." if len(item['task']) > 40 else item['task']
                print(f"   {i}. {priority_icon} {task_name:<43} ({item['hours']}h)")
                if item.get("reason"):
                    print(f"      💡 {item['reason']}")
        
        # Quick wins
        quick_wins = self._get_quick_wins()
        if quick_wins:
            total_quick_time = sum(win.get("time", 30) for win in quick_wins)
            print(f"\n⚡ QUICK WINS ({total_quick_time} minutes total):")
            print("-" * 30)
            for win in quick_wins:
                print(f"   • {win['task']} ({win.get('time', 30)}min)")
        
        # Progress insights
        insights = self._get_progress_insights()
        print(f"\n📊 PROGRESS INSIGHTS:")
        print("-" * 30)
        for insight in insights:
            print(f"   {insight}")
        
        # Success tip
        tip = self._get_daily_success_tip()
        print(f"\n🎯 SUCCESS TIP:")
        print(f"   {tip}")
        
        print("\n" + "=" * 65)
        print("💪 Start with high-energy tasks first!")
        print("🧠 Use: python progress_tracker.py work TAG_X hours 'description'")
        print("=" * 65)
        print()
    
    def _show_project_overview(self):
        total_hours = sum(tag.get("hours", 0) for tag in self.progress_data.get("tags", {}).values())
        current_tag = self.progress_data.get("current_tag", "TAG_5")
        current_tag_data = self.progress_data.get("tags", {}).get(current_tag, {})
        current_progress = current_tag_data.get("hours", 0)
        planned_hours = current_tag_data.get("planned_hours", 20)
        
        progress_pct = (current_progress / planned_hours * 100) if planned_hours > 0 else 0
        
        print(f"\n🎯 PROJECT OVERVIEW:")
        print(f"   Current TAG: {current_tag}")
        print(f"   Progress: {current_progress}/{planned_hours}h ({progress_pct:.0f}%)")
        print(f"   Total Hours: {total_hours}")
        
        if progress_pct >= 90:
            print(f"   🎉 Almost done with {current_tag}!")
        elif progress_pct >= 75:
            print(f"   🚀 {current_tag} in final stretch!")
        elif progress_pct >= 50:
            print(f"   📈 {current_tag} making good progress!")
        else:
            print(f"   ⚡ {current_tag} getting started!")
    
    def _get_todays_focus_items(self):
        active_priorities = [
            p for p in self.progress_data.get("current_priorities", [])
            if p.get("status", "active") != "completed"
        ]
        
        focus_items = []
        for priority in active_priorities[:3]:
            estimated_hours = priority.get("estimated_hours", 2)
            focus_items.append({
                "task": priority["task"],
                "hours": estimated_hours,
                "priority": priority.get("priority", "medium"),
                "reason": priority.get("reason", "")
            })
        
        return focus_items
    
    def _get_quick_wins(self):
        base_wins = [
            {"task": "Update project README with recent changes", "time": 15},
            {"task": "Fix minor CSS/styling issues", "time": 30},
            {"task": "Code cleanup and formatting", "time": 20},
            {"task": "Update package dependencies", "time": 10},
            {"task": "Write/update unit tests", "time": 45}
        ]
        
        return random.sample(base_wins, min(3, len(base_wins)))
    
    def _get_progress_insights(self):
        insights = []
        
        current_tag = self.progress_data.get("current_tag", "TAG_5")
        current_tag_data = self.progress_data.get("tags", {}).get(current_tag, {})
        current_hours = current_tag_data.get("hours", 0)
        planned_hours = current_tag_data.get("planned_hours", 20)
        
        if planned_hours > 0:
            progress_pct = (current_hours / planned_hours * 100)
            remaining_hours = planned_hours - current_hours
            
            if progress_pct >= 80:
                insights.append(f"🎉 {current_tag} is {progress_pct:.0f}% complete - {remaining_hours:.1f}h to finish!")
            elif progress_pct >= 50:
                insights.append(f"📈 {current_tag} is {progress_pct:.0f}% complete - {remaining_hours:.1f}h remaining")
            else:
                insights.append(f"🚀 {current_tag} is {progress_pct:.0f}% complete - need {remaining_hours:.1f}h more")
        
        daily_velocity = self._calculate_daily_velocity()
        if daily_velocity >= 4:
            insights.append(f"⚡ High velocity: {daily_velocity:.1f}h/day - you're on fire!")
        elif daily_velocity >= 2:
            insights.append(f"📊 Steady pace: {daily_velocity:.1f}h/day - consistent progress")
        else:
            insights.append(f"📈 Boost needed: {daily_velocity:.1f}h/day - aim for 3-4h today")
        
        return insights
    
    def _get_daily_success_tip(self):
        tips = [
            "Start with the most challenging task when your energy is highest!",
            "Use timeboxing: Set a timer for focused 45-minute work sessions.",
            "Break large tasks into smaller, 1-2 hour chunks for momentum.",
            "Minimize distractions: close unnecessary browser tabs and apps.",
            "Take a 5-minute break every hour to maintain focus."
        ]
        return random.choice(tips)
    
    def _calculate_daily_velocity(self):
        recent_logs = self.progress_data.get("daily_logs", [])[-14:]
        
        if not recent_logs:
            return 2.5
        
        daily_hours = {}
        for log in recent_logs:
            if log.get("action") == "hours_added":
                log_date = log["date"][:10]
                hours = log.get("hours", 0)
                daily_hours[log_date] = daily_hours.get(log_date, 0) + hours
        
        if not daily_hours:
            return 2.5
        
        active_days = [hours for hours in daily_hours.values() if hours > 0]
        return sum(active_days) / len(active_days) if active_days else 2.5
    
    def evening_recap(self, hours_worked, work_description=""):
        now = datetime.now()
        today = now.strftime("%A, %B %d, %Y")
        
        print("\n" + "=" * 65)
        print(f"🌙 EVENING RECAP")
        print(f"📅 {today}")
        print("=" * 65)
        
        # Log work
        current_tag = self.progress_data.get("current_tag", "TAG_5")
        old_hours = self.progress_data.get("tags", {}).get(current_tag, {}).get("hours", 0)
        
        # Simple work logging
        if current_tag in self.progress_data.get("tags", {}):
            self.progress_data["tags"][current_tag]["hours"] += hours_worked
            
            log_entry = {
                "date": datetime.now().isoformat(),
                "action": "hours_added",
                "tag": current_tag,
                "hours": hours_worked,
                "notes": work_description,
                "source": "daily_standup"
            }
            
            self.progress_data.setdefault("daily_logs", []).append(log_entry)
            self._save_progress_data()
        
        new_hours = self.progress_data.get("tags", {}).get(current_tag, {}).get("hours", old_hours)
        
        print(f"\n📝 TODAY'S WORK LOGGED:")
        print(f"   Hours Worked: {hours_worked}")
        print(f"   {current_tag}: {old_hours}h → {new_hours}h")
        if work_description:
            print(f"   Description: {work_description}")
        
        # Simple completion detection
        if work_description and any(keyword in work_description.lower() 
                                   for keyword in ["completed", "finished", "done"]):
            print(f"\n🎉 COMPLETION DETECTED!")
            print(f"   Great work on completing tasks today!")
        
        # Daily velocity
        daily_velocity = self._calculate_daily_velocity()
        print(f"\n📈 PRODUCTIVITY:")
        print(f"   Today: {hours_worked}h")
        print(f"   Recent average: {daily_velocity:.1f}h/day")
        
        if hours_worked >= 4:
            print(f"   🔥 Excellent productivity day!")
        elif hours_worked >= 2:
            print(f"   📈 Solid progress day!")
        else:
            print(f"   📊 Every hour counts - good job!")
        
        print("\n" + "=" * 65)
        print("😴 Great work today! Rest well.")
        print("🌅 Tomorrow: python daily_standup.py morning")
        print("=" * 65)
        print()


def main():
    parser = argparse.ArgumentParser(
        description="🌅 Daily Standup Automation - Fixed Version",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='action', help='Available actions')
    
    morning_parser = subparsers.add_parser('morning', help='🌅 Morning standup')
    
    evening_parser = subparsers.add_parser('evening', help='🌙 Evening recap')
    evening_parser.add_argument('hours', type=float, help='Hours worked today')
    evening_parser.add_argument('description', nargs='*', help='Work description', default=[])
    
    args = parser.parse_args()
    
    if not args.action:
        parser.print_help()
        return
    
    try:
        standup = DailyStandup()
        
        if args.action == 'morning':
            standup.morning_standup()
            
        elif args.action == 'evening':
            work_description = " ".join(args.description) if args.description else ""
            standup.evening_recap(args.hours, work_description)
            
    except Exception as e:
        print(f"\n❌ Error: {e}")
        print("💡 Make sure progress_tracker.py has been run at least once.")


if __name__ == "__main__":
    main()