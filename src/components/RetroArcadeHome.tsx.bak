import React from 'react';
import styled, { keyframes, css } from 'styled-components';

// Neon Animations
const neonPulse = keyframes`
  0% {
    text-shadow: 
      0 0 15px #00ffff,
      0 0 30px #00ffff,
      0 0 45px #00ffff,
      0 0 60px #00ffff;
  }
  100% {
    text-shadow: 
      0 0 8px #00ffff,
      0 0 15px #00ffff,
      0 0 25px #00ffff,
      0 0 35px #00ffff;
  }
`;

const neonPulseGreen = keyframes`
  0% {
    text-shadow: 
      0 0 10px #00ff00,
      0 0 20px #00ff00,
      0 0 30px #00ff00;
  }
  100% {
    text-shadow: 
      0 0 5px #00ff00,
      0 0 10px #00ff00,
      0 0 15px #00ff00;
  }
`;

const boxColorChange = keyframes`
  0% {
    border-color: #00ffff;
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.8),
      0 0 40px rgba(0, 255, 255, 0.5);
  }
  25% {
    border-color: #00ff88;
    box-shadow: 
      0 0 20px rgba(0, 255, 136, 0.8),
      0 0 40px rgba(0, 255, 136, 0.5);
  }
  50% {
    border-color: #ff00ff;
    box-shadow: 
      0 0 20px rgba(255, 0, 255, 0.8),
      0 0 40px rgba(255, 0, 255, 0.5);
  }
  75% {
    border-color: #ffff00;
    box-shadow: 
      0 0 20px rgba(255, 255, 0, 0.8),
      0 0 40px rgba(255, 255, 0, 0.5);
  }
  100% {
    border-color: #00ffff;
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.8),
      0 0 40px rgba(0, 255, 255, 0.5);
  }
`;

const neonPulseYellow = keyframes`
  0% {
    text-shadow: 
      0 0 5px #ffff00,
      0 0 10px #ffff00,
      0 0 15px #ffff00;
  }
  100% {
    text-shadow: 
      0 0 3px #ffff00,
      0 0 6px #ffff00,
      0 0 9px #ffff00;
  }
`;

// Styled Components
const Container = styled.div`
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: 'Courier New', monospace;
`;

const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
`;

const OnlineStatus = styled.div`
  font-size: 1rem;
  font-weight: bold;
  text-transform: uppercase;
  padding: 0.4rem 0.8rem;
  border-radius: 8px;
  border: 2px solid #00ff00;
  color: #00ff00;
  background: rgba(0, 255, 0, 0.1);
  animation: ${neonPulseGreen} 2s infinite alternate;
`;

const MainTitle = styled.div`
  text-align: center;
  margin: 3rem 0;
`;

const NeonTitle = styled.h1`
  font-size: 6rem;
  font-weight: bold;
  color: #00ffff;
  letter-spacing: 0.3rem;
  animation: ${neonPulse} 2s infinite alternate;
  margin: 0;
  
  @media (max-width: 768px) {
    font-size: 3.5rem;
  }
`;

const ContentArea = styled.div`
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding: 2rem 0;
  gap: 2rem;
  
  @media (max-width: 1024px) {
    flex-direction: column;
    align-items: center;
  }
`;

const ServerStatus = styled.div`
  background: rgba(0, 0, 0, 0.9);
  border: 4px solid #00ffff;
  border-radius: 15px;
  padding: 2rem;
  min-width: 400px;
  animation: ${boxColorChange} 3s infinite;
  
  @media (max-width: 1024px) {
    min-width: auto;
    width: 100%;
    max-width: 500px;
  }
`;

const StatusRow = styled.div`
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
  font-size: 1.1rem;
  padding: 0.5rem 0;
`;

const StatusLabel = styled.span`
  color: #00ffff;
  text-shadow: 
    0 0 5px #00ffff,
    0 0 10px #00ffff;
  font-weight: bold;
`;

const StatusValue = styled.span<{ $type?: 'players' | 'uptime' | 'version' }>`
  font-weight: bold;
  text-shadow: 
    0 0 5px currentColor,
    0 0 10px currentColor;
  
  ${props => props.$type === 'players' && `
    color: #ffff00;
    animation: ${neonPulseYellow} 2s infinite alternate;
  `}
  
  ${props => (props.$type === 'uptime' || props.$type === 'version') && `
    color: #00ff00;
    text-shadow: 
      0 0 5px #00ff00,
      0 0 10px #00ff00;
  `}
`;

// Props Interface
interface RetroArcadeHomeProps {
  onNavigateToGames?: () => void;
  serverStatus?: {
    status: string;
    uptime: number;
    version: string;
    authenticatedUsers?: number;
  } | null;
  playerCount?: number;
  connected?: boolean;
}

// Component
const RetroArcadeHome: React.FC<RetroArcadeHomeProps> = ({
  onNavigateToGames,
  serverStatus,
  playerCount = 0,
  connected = true
}) => {
  
  const formatUptime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  return (
    <Container>
      {/* Header */}
      <Header>
        <div></div>
        <OnlineStatus>
          ‚óè {connected ? 'ONLINE' : 'OFFLINE'}
        </OnlineStatus>
      </Header>

      {/* Main Title */}
      <MainTitle>
        <NeonTitle>RETRO ARCADE</NeonTitle>
      </MainTitle>

      {/* Server Status Box */}
      <ContentArea>
        <ServerStatus>
          <StatusRow>
            <StatusLabel>Players Online:</StatusLabel>
            <StatusValue $type="players">
              {serverStatus?.authenticatedUsers || playerCount}
            </StatusValue>
          </StatusRow>
          
          <StatusRow>
            <StatusLabel>Server Uptime:</StatusLabel>
            <StatusValue $type="uptime">
              {serverStatus?.uptime ? formatUptime(serverStatus.uptime) : '--'}
            </StatusValue>
          </StatusRow>
          
          <StatusRow>
            <StatusLabel>Version:</StatusLabel>
            <StatusValue $type="version">
              {serverStatus?.version || '1.0.0'}
            </StatusValue>
          </StatusRow>
        </ServerStatus>
      </ContentArea>
    </Container>
  );
};

export default RetroArcadeHome;