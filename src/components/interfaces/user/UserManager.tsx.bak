// UserManager.tsx - Hauptkomponente für das User-System
import { User } from './UserAuth';
import React, { useState, useEffect, useContext, createContext } from 'react';
import styled, { keyframes } from 'styled-components';
import { UserAuth } from './UserAuth';
import { UserProfile } from './UserProfile';

// Animationen
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const glow = keyframes`
  0%, 100% { box-shadow: 0 0 10px #00ffff; }
  50% { box-shadow: 0 0 20px #00ffff, 0 0 30px #00ffff; }
`;

// User Context
interface UserContextType {
  currentUser: User | null;
  login: (user: User) => void;
  logout: () => void;
  updateStats: (gameType: string, score: number) => void;
  updateHighScore: (gameType: string, score: number) => boolean;
  isLoggedIn: boolean;
}

const UserContext = createContext<UserContextType | null>(null);

// Custom Hook für User Context
export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
};

// Styled Components
const UserManagerContainer = styled.div`
  animation: ${fadeIn} 0.5s ease-out;
`;

const UserNavigation = styled.div`
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-bottom: 30px;
  padding: 20px;
  background: linear-gradient(145deg, #1a1a2e 0%, #16213e 100%);
  border: 2px solid #00ffff;
  border-radius: 15px;
  animation: ${glow} 3s ease-in-out infinite;
`;

const NavButton = styled.button<{ active?: boolean }>`
  background: ${props => 
    props.active 
      ? 'linear-gradient(45deg, #ff6b9d, #ff8e8e)' 
      : 'linear-gradient(45deg, #00ffff, #0099cc)'};
  border: none;
  color: white;
  padding: 12px 20px;
  border-radius: 25px;
  font-family: 'Orbitron', monospace;
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.05em;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255, 107, 157, 0.5);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
`;

const UserStatus = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  padding: 15px 25px;
  background: rgba(0, 255, 255, 0.1);
  border: 2px solid #00ffff;
  border-radius: 25px;
  color: #00ffff;
  font-weight: 600;
  
  .user-info {
    display: flex;
    align-items: center;
    gap: 10px;
    
    .avatar {
      width: 35px;
      height: 35px;
      background: linear-gradient(45deg, #ff6b9d, #00ffff);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 0.9rem;
    }
  }
`;

const Leaderboard = styled.div`
  background: linear-gradient(145deg, #1a1a2e 0%, #16213e 100%);
  border: 2px solid #00ffff;
  border-radius: 15px;
  padding: 30px;
  animation: ${glow} 3s ease-in-out infinite;
  
  h2 {
    color: #00ffff;
    text-align: center;
    margin-bottom: 25px;
    font-size: 1.8rem;
  }
`;

const LeaderboardTabs = styled.div`
  display: flex;
  justify-content: center;
  gap: 10px;
  margin-bottom: 20px;
`;

const TabButton = styled.button<{ active?: boolean }>`
  background: ${props => 
    props.active 
      ? 'linear-gradient(45deg, #ff6b9d, #ff8e8e)' 
      : 'rgba(255, 255, 255, 0.1)'};
  border: 1px solid ${props => props.active ? '#ff6b9d' : '#666'};
  color: white;
  padding: 8px 15px;
  border-radius: 15px;
  font-family: 'Orbitron', monospace;
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: linear-gradient(45deg, #ff6b9d, #ff8e8e);
    border-color: #ff6b9d;
  }
`;

const LeaderboardList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 10px;
`;

const LeaderboardItem = styled.div<{ rank: number }>`
  display: flex;
  align-items: center;
  gap: 15px;
  padding: 15px 20px;
  background: ${props => 
    props.rank === 1 ? 'rgba(255, 215, 0, 0.1)' :
    props.rank === 2 ? 'rgba(192, 192, 192, 0.1)' :
    props.rank === 3 ? 'rgba(205, 127, 50, 0.1)' :
    'rgba(255, 255, 255, 0.05)'};
  border: 2px solid ${props => 
    props.rank === 1 ? '#ffd700' :
    props.rank === 2 ? '#c0c0c0' :
    props.rank === 3 ? '#cd7f32' :
    '#333'};
  border-radius: 10px;
  
  .rank {
    font-size: 1.2rem;
    font-weight: bold;
    color: ${props => 
      props.rank === 1 ? '#ffd700' :
      props.rank === 2 ? '#c0c0c0' :
      props.rank === 3 ? '#cd7f32' :
      '#00ffff'};
    width: 30px;
    text-align: center;
  }
  
  .player-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 10px;
    
    .avatar {
      width: 30px;
      height: 30px;
      background: linear-gradient(45deg, #ff6b9d, #00ffff);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 0.8rem;
    }
    
    .username {
      color: #ffffff;
      font-weight: 600;
    }
  }
  
  .score {
    color: #ffff00;
    font-weight: bold;
    font-size: 1.1rem;
  }
`;

// UserProvider Component
interface UserProviderProps {
  children: React.ReactNode;
}

export const UserProvider: React.FC<UserProviderProps> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  // User aus localStorage laden
  useEffect(() => {
    const savedUser = localStorage.getItem('retro_gaming_current_user');
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser({
          ...user,
          createdAt: new Date(user.createdAt)
        });
      } catch (error) {
        console.error('Error loading user from localStorage:', error);
        localStorage.removeItem('retro_gaming_current_user');
      }
    }
  }, []);

  const login = (user: User) => {
    setCurrentUser(user);
    localStorage.setItem('retro_gaming_current_user', JSON.stringify(user));
  };

  const logout = () => {
    setCurrentUser(null);
    localStorage.removeItem('retro_gaming_current_user');
  };

  const updateStats = (gameType: string, score: number) => {
    if (!currentUser) return;

    const updatedUser = {
      ...currentUser,
      stats: {
        ...currentUser.stats,
        gamesPlayed: currentUser.stats.GamesPlayed + 1,
        totalScore: currentUser.stats.totalScore + score,
        favoriteGame: gameType // Vereinfacht - könnte basierend auf Häufigkeit berechnet werden
      }
    };

    // User in localStorage aktualisieren
    const users = JSON.parse(localStorage.getItem('retro_gaming_users') || '[]');
    const updatedUsers = users.map((u: any) => 
      u.id === currentUser.id ? { ...updatedUser, password: u.password } : u
    );
    localStorage.setItem('retro_gaming_users', JSON.stringify(updatedUsers));
    localStorage.setItem('retro_gaming_current_user', JSON.stringify(updatedUser));

    setCurrentUser(updatedUser);
  };

  const updateHighScore = (gameType: string, score: number): boolean => {
    if (!currentUser) return false;

    const currentHighScore = currentUser.stats.highScores[gameType] || 0;
    if (score <= currentHighScore) return false;

    const updatedUser = {
      ...currentUser,
      stats: {
        ...currentUser.stats,
        highScores: {
          ...currentUser.stats.highScores,
          [gameType]: score
        }
      }
    };

    // User in localStorage aktualisieren
    const users = JSON.parse(localStorage.getItem('retro_gaming_users') || '[]');
    const updatedUsers = users.map((u: any) => 
      u.id === currentUser.id ? { ...updatedUser, password: u.password } : u
    );
    localStorage.setItem('retro_gaming_users', JSON.stringify(updatedUsers));
    localStorage.setItem('retro_gaming_current_user', JSON.stringify(updatedUser));

    setCurrentUser(updatedUser);
    return true; // Neuer High Score!
  };

  const contextValue: UserContextType = {
    currentUser,
    login,
    logout,
    updateStats,
    updateHighScore,
    isLoggedIn: !!currentUser
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
};

// UserManager Component
type ViewType = 'auth' | 'profile' | 'leaderboard';

export const UserManager: React.FC = () => {
  const { currentUser, login, logout, updateStats } = useUser();
  const [currentView, setCurrentView] = useState<ViewType>('auth');
  const [leaderboardGame, setLeaderboardGame] = useState<string>('snake');

  // Automatisch zur Profilansicht wechseln nach Login
  useEffect(() => {
    if (currentUser && currentView === 'auth') {
      setCurrentView('profile');
    } else if (!currentUser) {
      setCurrentView('auth');
    }
  }, [currentUser, currentView]);

  const getAllUsers = (): User[] => {
    const users = JSON.parse(localStorage.getItem('retro_gaming_users') || '[]');
    return users.map((user: any) => ({
      ...user,
      createdAt: new Date(user.createdAt)
    }));
  };

  const getLeaderboardData = (gameType: string) => {
    const users = getAllUsers();
    return users
      .filter(user => user.stats.highScores[gameType] > 0)
      .sort((a, b) => b.stats.highScores[gameType] - a.stats.highScores[gameType])
      .slice(0, 10); // Top 10
  };

  const renderUserStatus = () => {
    if (!currentUser) return null;

    return (
      <UserStatus>
        <div className="user-info">
          <div className="avatar">
            {currentUser.username.slice(0, 2).toUpperCase()}
          </div>
          <span>Welcome, {currentUser.username}!</span>
        </div>
        <div>🎮 {currentUser.stats.GamesPlayed} games</div>
        <div>💯 {currentUser.stats.totalScore.toLocaleString()} points</div>
      </UserStatus>
    );
  };

  const renderLeaderboard = () => {
    const leaderboardData = getLeaderboardData(leaderboardGame);
    const gameNames: Record<string, string> = {
      snake: '🐍 Snake',
      memory: '🧠 Memory',
      pong: '🏓 Pong',
      tetris: '🧩 Tetris'
    };

    return (
      <Leaderboard>
        <h2>🏆 Leaderboard</h2>
        
        <LeaderboardTabs>
          {Object.keys(gameNames).map(game => (
            <TabButton
              key={game}
              active={leaderboardGame === game}
              onClick={() => setLeaderboardGame(game)}
            >
              {gameNames[game]}
            </TabButton>
          ))}
        </LeaderboardTabs>

        <LeaderboardList>
          {leaderboardData.length === 0 ? (
            <div style={{ textAlign: 'center', color: '#666', padding: '20px' }}>
              No scores recorded yet for {gameNames[leaderboardGame]}
            </div>
          ) : (
            leaderboardData.map((user, index) => (
              <LeaderboardItem key={user.id} rank={index + 1}>
                <div className="rank">#{index + 1}</div>
                <div className="player-info">
                  <div className="avatar">
                    {user.username.slice(0, 2).toUpperCase()}
                  </div>
                  <div className="username">{user.username}</div>
                </div>
                <div className="score">
                  {user.stats.highScores[leaderboardGame].toLocaleString()}
                </div>
              </LeaderboardItem>
            ))
          )}
        </LeaderboardList>
      </Leaderboard>
    );
  };

  const renderContent = () => {
    switch (currentView) {
      case 'auth':
        return (
          <UserAuth
            onLogin={login}
            onLogout={logout}
            currentUser={currentUser}
          />
        );
      case 'profile':
        return currentUser ? (
          <UserProfile
            user={currentUser}
            onUpdateStats={updateStats}
          />
        ) : null;
      case 'leaderboard':
        return renderLeaderboard();
      default:
        return null;
    }
  };

  return (
    <UserManagerContainer>
      {/* User Status Bar */}
      {currentUser && renderUserStatus()}

      {/* Navigation */}
      <UserNavigation>
        {!currentUser ? (
          <NavButton active={currentView === 'auth'}>
            🔐 Login / Register
          </NavButton>
        ) : (
          <>
            <NavButton
              active={currentView === 'profile'}
              onClick={() => setCurrentView('profile')}
            >
              👤 Profile
            </NavButton>
            <NavButton
              active={currentView === 'leaderboard'}
              onClick={() => setCurrentView('leaderboard')}
            >
              🏆 Leaderboard
            </NavButton>
            <NavButton onClick={logout}>
              🚪 Logout
            </NavButton>
          </>
        )}
      </UserNavigation>

      {/* Content */}
      {renderContent()}
    </UserManagerContainer>
  );
};

// GameIntegration Hook - Für Integration in deine Spiele
export const useGameIntegration = () => {
  const { currentUser, updateStats, updateHighScore } = useUser();

  const recordGameResult = (gameType: string, score: number, additionalData?: any) => {
    if (!currentUser) return { newHighScore: false };

    // Statistiken aktualisieren
    updateStats(gameType, score);

    // High Score prüfen
    const newHighScore = updateHighScore(gameType, score);

    // Optional: Zusätzliche Daten verarbeiten (z.B. für spezifische Achievements)
    if (additionalData) {
      console.log(`Additional game data for ${gameType}:`, additionalData);
    }

    return { newHighScore };
  };

  return {
    currentUser,
    isLoggedIn: !!currentUser,
    recordGameResult
  };
};

// High Score Notification Component
const HighScoreNotification = styled.div`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: linear-gradient(45deg, #ffd700, #ffed4e);
  color: #000;
  padding: 20px 30px;
  border-radius: 15px;
  font-family: 'Orbitron', monospace;
  font-weight: bold;
  font-size: 1.2rem;
  text-align: center;
  z-index: 1000;
  animation: ${fadeIn} 0.5s ease-out;
  box-shadow: 0 10px 30px rgba(255, 215, 0, 0.5);
  
  h3 {
    margin: 0 0 10px 0;
    font-size: 1.5rem;
  }
  
  p {
    margin: 0;
    opacity: 0.8;
  }
`;

interface HighScoreNotificationProps {
  gameType: string;
  score: number;
  onClose: () => void;
}

export const HighScoreAlert: React.FC<HighScoreNotificationProps> = ({ 
  gameType, 
  score, 
  onClose 
}) => {
  useEffect(() => {
    const timer = setTimeout(onClose, 3000);
    return () => clearTimeout(timer);
  }, [onClose]);

  const gameNames: Record<string, string> = {
    snake: '🐍 Snake',
    memory: '🧠 Memory',
    pong: '🏓 Pong',
    tetris: '🧩 Tetris'
  };

  return (
    <HighScoreNotification onClick={onClose}>
      <h3>🏆 NEW HIGH SCORE!</h3>
      <p>{gameNames[gameType]}: {score.toLocaleString()} points</p>
    </HighScoreNotification>
  );
};