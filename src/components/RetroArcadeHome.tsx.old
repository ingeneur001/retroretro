import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { useModeDetection } from '../../hooks/useModeDetection';
import { useSocket } from '../../hooks/useSocket';

// Styled Components
const HomeContainer = styled.div`
  min-height: 100vh;
  background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
  color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  font-family: 'Orbitron', monospace;
`;

const Title = styled.h1`
  font-size: 4rem;
  background: linear-gradient(45deg, #00ffff, #ff00ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-align: center;
  margin-bottom: 1rem;
  text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
  
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const Subtitle = styled.p`
  font-size: 1.2rem;
  text-align: center;
  margin-bottom: 3rem;
  color: #b0b0b0;
  max-width: 600px;
`;

const ButtonContainer = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  justify-content: center;
  margin-bottom: 3rem;
`;

const GameButton = styled.button`
  background: linear-gradient(45deg, #00ffff, #0099cc);
  border: none;
  color: white;
  padding: 1rem 2rem;
  border-radius: 50px;
  font-family: 'Orbitron', monospace;
  font-weight: 600;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  min-width: 200px;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 255, 255, 0.5);
    background: linear-gradient(45deg, #ff00ff, #cc0099);
  }

  &:active {
    transform: translateY(-2px);
  }
`;

const StatusContainer = styled.div`
  position: fixed;
  top: 20px;
  right: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  z-index: 1000;
`;

const StatusIndicator = styled.div<{ status: 'connected' | 'disconnected' | 'connecting' }>`
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  background: ${props => {
    switch (props.status) {
      case 'connected': return 'linear-gradient(45deg, #4CAF50, #45a049)';
      case 'disconnected': return 'linear-gradient(45deg, #f44336, #da190b)';
      case 'connecting': return 'linear-gradient(45deg, #ff9800, #f57c00)';
      default: return 'linear-gradient(45deg, #9e9e9e, #757575)';
    }
  }};
  color: white;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
`;

const ModeIndicator = styled.div<{ mode: string }>`
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  background: ${props => {
    switch (props.mode) {
      case 'development': return 'linear-gradient(45deg, #2196F3, #1976D2)';
      case 'production': return 'linear-gradient(45deg, #4CAF50, #45a049)';
      case 'demo': return 'linear-gradient(45deg, #ff9800, #f57c00)';
      default: return 'linear-gradient(45deg, #9e9e9e, #757575)';
    }
  }};
  color: white;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
`;

const FeatureGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  max-width: 1200px;
  width: 100%;
  margin-bottom: 3rem;
`;

const FeatureCard = styled.div`
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 15px;
  padding: 2rem;
  text-align: center;
  border: 1px solid rgba(0, 255, 255, 0.3);
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
    border-color: rgba(0, 255, 255, 0.6);
  }
`;

const FeatureIcon = styled.div`
  font-size: 3rem;
  margin-bottom: 1rem;
`;

const FeatureTitle = styled.h3`
  color: #00ffff;
  margin-bottom: 1rem;
  font-size: 1.2rem;
`;

const FeatureDescription = styled.p`
  color: #b0b0b0;
  line-height: 1.5;
`;

const Footer = styled.footer`
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
  color: #666;
  font-size: 0.8rem;
`;

// Component
const RetroArcadeHome: React.FC = () => {
  const navigate = useNavigate();
  const { mode } = useModeDetection();
  const { isConnected, connectionStatus } = useSocket();
  const [showFeatures, setShowFeatures] = useState(false);

  useEffect(() => {
    // Animate features on load
    const timer = setTimeout(() => setShowFeatures(true), 500);
    return () => clearTimeout(timer);
  }, []);

  const handleGamesNavigation = () => {
    console.log('üéÆ Navigating to Games Zone Hub');
    navigate('/games');
  };

  const handleProfileNavigation = () => {
    console.log('üë§ Navigating to Profile');
    navigate('/profile');
  };

  const handleDashboardNavigation = () => {
    if (mode === 'development') {
      console.log('üîß Navigating to Development Dashboard');
      navigate('/dashboard');
    }
  };

  const getConnectionStatus = () => {
    if (connectionStatus === 'connecting') return 'connecting';
    return isConnected ? 'connected' : 'disconnected';
  };

  const getConnectionText = () => {
    switch (connectionStatus) {
      case 'connecting': return 'Connecting...';
      case 'connected': return 'Online';
      case 'disconnected': return 'Offline';
      default: return 'Unknown';
    }
  };

  const features = [
    {
      icon: 'üé≤',
      title: 'Singleplayer Zone',
      description: 'Classic games like Snake, Tetris, Memory and Puzzle games for solo gaming sessions.'
    },
    {
      icon: 'üë•',
      title: 'Multiplayer Zone',
      description: 'Real-time gaming with friends. Create rooms, join tournaments and chat while playing.'
    },
    {
      icon: 'üïπÔ∏è',
      title: 'Arcade Zone',
      description: 'Retro arcade classics like Pong, Space Invaders, Breakout and more nostalgic games.'
    },
    {
      icon: 'üèÜ',
      title: 'High Scores',
      description: mode === 'production' ? 'Track your best scores and compete with players worldwide.' : 'View local high scores.'
    },
    {
      icon: 'üíæ',
      title: 'Game Progress',
      description: mode === 'production' ? 'Save your game progress and continue where you left off.' : 'Session-based progress tracking.'
    },
    {
      icon: '‚ö°',
      title: 'Real-time Gaming',
      description: 'Experience smooth, lag-free gaming with our optimized real-time communication system.'
    }
  ];

  return (
    <HomeContainer>
      {/* Status Indicators */}
      <StatusContainer>
        <StatusIndicator status={getConnectionStatus()}>
          {getConnectionText()}
        </StatusIndicator>
        <ModeIndicator mode={mode}>
          {mode} Mode
        </ModeIndicator>
      </StatusContainer>

      {/* Main Content */}
      <Title>RETRORETRO</Title>
      <Subtitle>
        Experience the golden age of gaming with modern technology. 
        Choose your gaming zone and dive into endless retro fun!
      </Subtitle>

      {/* Action Buttons */}
      <ButtonContainer>
        <GameButton onClick={handleGamesNavigation}>
          üéÆ Enter Games Zone
        </GameButton>
        <GameButton onClick={handleProfileNavigation}>
          üë§ Profile
        </GameButton>
        {mode === 'development' && (
          <GameButton onClick={handleDashboardNavigation}>
            üîß Dashboard
          </GameButton>
        )}
      </ButtonContainer>

      {/* Features Grid */}
      {showFeatures && (
        <FeatureGrid>
          {features.map((feature, index) => (
            <FeatureCard key={index}>
              <FeatureIcon>{feature.icon}</FeatureIcon>
              <FeatureTitle>{feature.title}</FeatureTitle>
              <FeatureDescription>{feature.description}</FeatureDescription>
            </FeatureCard>
          ))}
        </FeatureGrid>
      )}

      {/* Demo Mode Notice */}
      {mode === 'demo' && (
        <div style={{
          background: 'rgba(255, 152, 0, 0.2)',
          border: '1px solid #ff9800',
          borderRadius: '10px',
          padding: '1rem',
          marginTop: '2rem',
          textAlign: 'center',
          maxWidth: '600px'
        }}>
          <h3 style={{ color: '#ff9800', margin: '0 0 0.5rem 0' }}>üö´ Demo Mode</h3>
          <p style={{ margin: 0, color: '#ffcc80' }}>
            You're in demo mode with limited features. Some games and functionalities are restricted.
          </p>
        </div>
      )}

      <Footer>
        <p>RETRORETRO ¬© 2024 - Retro Gaming Experience</p>
        <p>Mode: {mode.toUpperCase()} | Status: {getConnectionText()}</p>
      </Footer>
    </HomeContainer>
  );
};

export default RetroArcadeHome;